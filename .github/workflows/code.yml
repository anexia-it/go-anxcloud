name: Code

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - main
    types:
      - labeled
      - opened
      - edited
    paths-ignore:
      - "*.md"
      - '*.yaml'
      - '*.yml'
      - LICENCE
      - 'docs/**'
env:
  GO111MODULE: on

jobs:
  go-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go:
        - version: "1.19"
          name: target
        - version: "1.20"
          name: latest
    name: "Linting with ${{ matrix.go.name }} Go"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go.version }}
      - name: run linters
        run: |
          make go-lint
          make fmtcheck
  codegen-uptodate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go:
        - version: "1.19"
          name: target
        - version: "1.20"
          name: latest
    name: "Code generator with ${{ matrix.go.name }} Go"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go.version }}
      - name: generate code
        run:  |
          make generate
          if [ -n "$(git status --porcelain=v1)" ]; then git add -N .; git diff; exit 1; fi
  unit:
    runs-on: ubuntu-latest
    if: success() || failure()
    strategy:
      matrix:
        go:
        - version: "1.19"
          name: target
        - version: "1.20"
          name: latest
    name: "Unit tests with ${{ matrix.go.name }} Go"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go.version }}
      - name: run unit tests
        run: make test
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          files: ./coverage.out
          flags: unittests
          verbose: true
  integration-tests:
    if: ${{ github.event.label.name == 'integration_tests' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go:
        - version: "1.19"
          name: target
    name: "Integration tests with ${{ matrix.go.name }} Go (ok-to-test or trusted)"
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          ref: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go.version }}
      - name: run integration tests
        env:
          ANEXIA_TOKEN: ${{ secrets.ANEXIA_TOKEN }}
        run: make func-test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          files: ./coverage.out
          flags: integration
          verbose: true
          override_pr: ${{ github.event.client_payload.pull_request.number }}